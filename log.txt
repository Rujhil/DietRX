/app/reset_elasticsearch.py:5: DeprecationWarning: Passing transport options in the API method is deprecated. Use 'Elasticsearch.options()' instead.
  app.elasticsearch.indices.delete(index='food', ignore=[400, 404])
/app/reset_elasticsearch.py:5: ElasticsearchWarning: Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
  app.elasticsearch.indices.delete(index='food', ignore=[400, 404])
/app/reset_elasticsearch.py:6: DeprecationWarning: Passing transport options in the API method is deprecated. Use 'Elasticsearch.options()' instead.
  app.elasticsearch.indices.delete(index='disease', ignore=[400, 404])
/app/reset_elasticsearch.py:6: ElasticsearchWarning: Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
  app.elasticsearch.indices.delete(index='disease', ignore=[400, 404])
/app/reset_elasticsearch.py:7: DeprecationWarning: Passing transport options in the API method is deprecated. Use 'Elasticsearch.options()' instead.
  app.elasticsearch.indices.delete(index='gene', ignore=[400, 404])
/app/reset_elasticsearch.py:7: ElasticsearchWarning: Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
  app.elasticsearch.indices.delete(index='gene', ignore=[400, 404])
/app/reset_elasticsearch.py:8: DeprecationWarning: Passing transport options in the API method is deprecated. Use 'Elasticsearch.options()' instead.
  app.elasticsearch.indices.delete(index='chemical', ignore=[400, 404])
/app/reset_elasticsearch.py:8: ElasticsearchWarning: Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
  app.elasticsearch.indices.delete(index='chemical', ignore=[400, 404])
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.foods' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.foods' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.diseases' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.diseases' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.diseases' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.diseases' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.foods' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.foods' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_disease' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Disease.foods' (copies food.food_id to food_disease.food_id), 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food.food_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_disease.food' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Disease.foods' (copies food.food_id to food_disease.food_id), 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food_disease.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.food_disease' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Disease.foods' (copies disease.disease_id to food_disease.disease_id), 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Disease.food_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_disease.disease' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Disease.foods' (copies disease.disease_id to food_disease.disease_id), 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food_disease.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.disease_gene' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id), 'Gene.diseases' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease.disease_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease_gene.disease' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id), 'Gene.diseases' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease_gene.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.disease_gene' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id), 'Gene.diseases' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Gene.disease_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease_gene.gene' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id), 'Gene.diseases' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease_gene.gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_gene' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id), 'Gene.foods' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food.food_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_gene.food' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id), 'Gene.foods' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food_gene.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.food_gene' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id), 'Gene.foods' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Gene.food_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_gene.gene' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id), 'Gene.foods' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food_gene.gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical.chemical_disease' will copy column chemical.pubchem_id to column chemical_disease.pubchem_id, which conflicts with relationship(s): 'Chemical.diseases' (copies chemical.pubchem_id to chemical_disease.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical.chemical_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical_disease.chemical' will copy column chemical.pubchem_id to column chemical_disease.pubchem_id, which conflicts with relationship(s): 'Chemical.diseases' (copies chemical.pubchem_id to chemical_disease.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical_disease.chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.chemical_disease' will copy column disease.disease_id to column chemical_disease.disease_id, which conflicts with relationship(s): 'Chemical.diseases' (copies disease.disease_id to chemical_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.chemical_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical_disease.disease' will copy column disease.disease_id to column chemical_disease.disease_id, which conflicts with relationship(s): 'Chemical.diseases' (copies disease.disease_id to chemical_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical_disease.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_chemical' will copy column food.food_id to column food_chemical.food_id, which conflicts with relationship(s): 'Chemical.foods' (copies food.food_id to food_chemical.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food.food_chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_chemical.food' will copy column food.food_id to column food_chemical.food_id, which conflicts with relationship(s): 'Chemical.foods' (copies food.food_id to food_chemical.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food_chemical.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical.food_chemical' will copy column chemical.pubchem_id to column food_chemical.pubchem_id, which conflicts with relationship(s): 'Chemical.foods' (copies chemical.pubchem_id to food_chemical.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Chemical.food_chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_chemical.chemical' will copy column chemical.pubchem_id to column food_chemical.pubchem_id, which conflicts with relationship(s): 'Chemical.foods' (copies chemical.pubchem_id to food_chemical.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food_chemical.chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/app/search.py:9: ElasticsearchWarning: Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
  app.elasticsearch.index(index=index, id=getattr(model, id), body=payload)
  usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.foods' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.foods' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.diseases' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.diseases' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.diseases' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.diseases' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.foods' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.foods' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="genes"' to the 'Gene.foods' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_disease' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Disease.foods' (copies food.food_id to food_disease.food_id), 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food.food_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_disease.food' will copy column food.food_id to column food_disease.food_id, which conflicts with relationship(s): 'Disease.foods' (copies food.food_id to food_disease.food_id), 'Food.diseases' (copies food.food_id to food_disease.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food_disease.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.food_disease' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Disease.foods' (copies disease.disease_id to food_disease.disease_id), 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Disease.food_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_disease.disease' will copy column disease.disease_id to column food_disease.disease_id, which conflicts with relationship(s): 'Disease.foods' (copies disease.disease_id to food_disease.disease_id), 'Food.diseases' (copies disease.disease_id to food_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,foods"' to the 'Food_disease.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.disease_gene' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id), 'Gene.diseases' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease.disease_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease_gene.disease' will copy column disease.disease_id to column disease_gene.disease_id, which conflicts with relationship(s): 'Disease.genes' (copies disease.disease_id to disease_gene.disease_id), 'Gene.diseases' (copies disease.disease_id to disease_gene.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease_gene.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.disease_gene' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id), 'Gene.diseases' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Gene.disease_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease_gene.gene' will copy column gene.gene_id to column disease_gene.gene_id, which conflicts with relationship(s): 'Disease.genes' (copies gene.gene_id to disease_gene.gene_id), 'Gene.diseases' (copies gene.gene_id to disease_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases,genes"' to the 'Disease_gene.gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_gene' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id), 'Gene.foods' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food.food_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_gene.food' will copy column food.food_id to column food_gene.food_id, which conflicts with relationship(s): 'Food.genes' (copies food.food_id to food_gene.food_id), 'Gene.foods' (copies food.food_id to food_gene.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food_gene.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Gene.food_gene' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id), 'Gene.foods' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Gene.food_gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_gene.gene' will copy column gene.gene_id to column food_gene.gene_id, which conflicts with relationship(s): 'Food.genes' (copies gene.gene_id to food_gene.gene_id), 'Gene.foods' (copies gene.gene_id to food_gene.gene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods,genes"' to the 'Food_gene.gene' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical.chemical_disease' will copy column chemical.pubchem_id to column chemical_disease.pubchem_id, which conflicts with relationship(s): 'Chemical.diseases' (copies chemical.pubchem_id to chemical_disease.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical.chemical_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical_disease.chemical' will copy column chemical.pubchem_id to column chemical_disease.pubchem_id, which conflicts with relationship(s): 'Chemical.diseases' (copies chemical.pubchem_id to chemical_disease.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical_disease.chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Disease.chemical_disease' will copy column disease.disease_id to column chemical_disease.disease_id, which conflicts with relationship(s): 'Chemical.diseases' (copies disease.disease_id to chemical_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Disease.chemical_disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical_disease.disease' will copy column disease.disease_id to column chemical_disease.disease_id, which conflicts with relationship(s): 'Chemical.diseases' (copies disease.disease_id to chemical_disease.disease_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="diseases"' to the 'Chemical_disease.disease' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food.food_chemical' will copy column food.food_id to column food_chemical.food_id, which conflicts with relationship(s): 'Chemical.foods' (copies food.food_id to food_chemical.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food.food_chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_chemical.food' will copy column food.food_id to column food_chemical.food_id, which conflicts with relationship(s): 'Chemical.foods' (copies food.food_id to food_chemical.food_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food_chemical.food' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Chemical.food_chemical' will copy column chemical.pubchem_id to column food_chemical.pubchem_id, which conflicts with relationship(s): 'Chemical.foods' (copies chemical.pubchem_id to food_chemical.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Chemical.food_chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(
/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/model.py:22: SAWarning: relationship 'Food_chemical.chemical' will copy column chemical.pubchem_id to column food_chemical.pubchem_id, which conflicts with relationship(s): 'Chemical.foods' (copies chemical.pubchem_id to food_chemical.pubchem_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="foods"' to the 'Food_chemical.chemical' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
  return cls.query_class(